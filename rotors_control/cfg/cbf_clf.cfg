#!/usr/bin/env python
PACKAGE = "rotors_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# @todo Think about levels. Setting most of these to STOP to guarantee atomicity.
# @todo Double check these ranges, defaults

ENABLE_CTRL         = gen.const("ENABLE_CTRL",      int_t, 0x00000001, "enable_ctrl")
PACKET_RATE         = gen.const("PACKET_RATE",      int_t, 0x00000002, "configures the packet rates")
HLI_CONFIG          = gen.const("HLI_CONFIG",       int_t, 0x00000004, "configures where control and state estimation are performed")
MISC                = gen.const("MISC",             int_t, 0x01000000, "misc")


enum_position_ctrl_mode = gen.enum([
gen.const("POSCTRL_OFF",             str_t, "off",         "position control off"),
gen.const("POSCTRL_HIGHLEVEL",       str_t, "HighLevel",   "position control runs on the HLP."), 
gen.const("POSCTRL_GPS",             str_t, "GPS",         "gps position control on the LLP.")],
"An enum to set the position control mode.")

enum_state_estimation_mode = gen.enum([
gen.const("STATE_EST_OFF",           str_t, "off",         "state estimation off"),
gen.const("STATE_EST_HIGHLEVEL_SSDK",str_t, "HighLevel_SSDK","state estimation runs on the HLP within the SSDK."), 
gen.const("STATE_EST_HIGHLEVEL_EKF", str_t, "HighLevel_EKF","state estimation runs on the HLP within an EKF."), 
gen.const("STATE_EST_EXTERN",        str_t, "Extern",      "state estimation is performed externally.")],
"An enum to set the state estimation mode.")


#       Name                        Type        Reconfiguration level    Description                                           Default Min     Max
gen.add("eta1",                double_t,   MISC["value"],           "parameter",                               2.5,    0.,     100.0)
gen.add("epsilon1",           double_t,   MISC["value"],           "parameter",                                2,    0.,     200.0)
gen.add("c1",                  double_t,   MISC["value"],           "parameter",                       8,    0.,     100)
gen.add("eta2",                double_t,   MISC["value"],           "parameter",                   20,  0,  1000)
gen.add("epsilon2",            double_t,   MISC["value"],           "parameter",                    2,   0,   200)
gen.add("c2",                   double_t,   MISC["value"],           "parameter",                   15,   0,  500)
gen.add("max_pos_x",                double_t,   MISC["value"],           "upper bound for position x [m].",                   1.0e3,  -1.0e3, 1.0e3)
gen.add("max_pos_y",                double_t,   MISC["value"],           "upper bound for position y [m].",                   1.0e3,  -1.0e3, 1.0e3)
gen.add("max_pos_z",                double_t,   MISC["value"],           "upper bound for position z [m].",                   1.0e3,  -1.0e3, 1.0e3)
gen.add("flag_clf",                double_t,   MISC["value"],           "flag ",                   1,  0,  1)




exit(gen.generate(PACKAGE, "Config", "cbf_clf"))
